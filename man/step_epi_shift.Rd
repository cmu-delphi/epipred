% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/step_epi_shift.R
\name{step_epi_lag}
\alias{step_epi_lag}
\alias{step_epi_ahead}
\title{Create a shifted predictor}
\usage{
step_epi_lag(
  recipe,
  ...,
  lag,
  role = "predictor",
  prefix = "lag_",
  default = NA,
  skip = FALSE,
  latency_adjustment = c("None", "extend_ahead", "locf", "extend_lags"),
  id = rand_id("epi_lag")
)

step_epi_ahead(
  recipe,
  ...,
  ahead,
  role = "outcome",
  prefix = "ahead_",
  default = NA,
  latency_adjustment = c("None", "extend_ahead", "locf", "extend_lags"),
  columns = NULL,
  skip = FALSE,
  id = rand_id("epi_ahead")
)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the
sequence of operations for this recipe.}

\item{...}{One or more selector functions to choose variables
for this step. See \code{\link[recipes:selections]{recipes::selections()}} for more details.}

\item{lag, ahead}{A vector of integers. Each specified column will
be the lag or lead for each value in the vector. Lag integers must be
nonnegative, while ahead integers must be positive.}

\item{role}{For model terms created by this step, what analysis role should
they be assigned? \code{lag} is default a predictor while \code{ahead} is an outcome.}

\item{prefix}{A character string that will be prefixed to the new column.}

\item{default}{Determines what fills empty rows
left by leading/lagging (defaults to NA).}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by \code{\link[=bake]{bake()}}? While all operations are baked
when \code{\link[=prep]{prep()}} is run, some operations may not be able to be
conducted on new data (e.g. processing the outcome variable(s)).
Care should be taken when using \code{skip = TRUE} as it may affect
the computations for subsequent operations.}

\item{latency_adjustment}{a character. Determines the method by which the forecast handles data that doesn't extend to the day the forecast is made. The options are:
\itemize{
\item \code{"extend_ahead"}: actually forecasts from the last date. E.g. if there are 3 days of latency for a 4 day ahead forecast, the ahead used in practice is actually 7.
\item \code{"locf"}: carries forward the last observed value up to the forecast date.
\item \code{"extend_lags"}: per \code{epi_key} and \code{predictor}, adjusts the lag so that the shortest lag at predict time is
}}

\item{id}{A unique identifier for the step}
}
\value{
An updated version of \code{recipe} with the new step added to the
sequence of any existing operations.
}
\description{
\code{step_epi_lag} and \code{step_epi_ahead} create a \emph{specification} of a recipe step
that will add new columns of shifted data. The former will created a lag
column, while the latter will create a lead column. Shifted data will
by default include NA values where the shift was induced.
These can be properly removed with \code{\link[=step_epi_naomit]{step_epi_naomit()}}, or you may
specify an alternative filler value with the \code{default}
argument.
}
\details{
The step assumes that the data are already \emph{in the proper sequential
order} for shifting.

The \code{prefix} and \code{id} arguments are unchangeable to ensure that the code runs
properly and to avoid inconsistency with naming. For \code{step_epi_ahead}, they
are always set to \code{"ahead_"} and \code{"epi_ahead"} respectively, while for
\code{step_epi_lag}, they are set to \code{"lag_"} and \verb{"epi_lag}, respectively.
}
\examples{
r <- epi_recipe(case_death_rate_subset) \%>\%
  step_epi_ahead(death_rate, ahead = 7) \%>\%
  step_epi_lag(death_rate, lag = c(0, 7, 14))
r
}
\seealso{
Other row operation steps: 
\code{\link{step_adjust_latency}()},
\code{\link{step_growth_rate}()},
\code{\link{step_lag_difference}()}

Other row operation steps: 
\code{\link{step_adjust_latency}()},
\code{\link{step_growth_rate}()},
\code{\link{step_lag_difference}()}
}
\concept{row operation steps}
