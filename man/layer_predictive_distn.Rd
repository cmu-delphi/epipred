% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layer_predictive_distn.R
\name{layer_predictive_distn}
\alias{layer_predictive_distn}
\title{Returns predictive distributions}
\usage{
layer_predictive_distn(
  frosting,
  ...,
  dist_type = c("gaussian", "student_t"),
  truncate = c(-Inf, Inf),
  name = ".pred_distn",
  id = rand_id("predictive_distn")
)
}
\arguments{
\item{frosting}{a \code{frosting} postprocessor}

\item{...}{Unused, include for consistency with other layers.}

\item{dist_type}{Gaussian or Student's t predictive intervals}

\item{truncate}{Do we truncate the distribution to an interval}

\item{name}{character. The name for the output column.}

\item{id}{a random id string}
}
\value{
an updated \code{frosting} postprocessor with additional columns of the
residual quantiles added to the prediction
}
\description{
This function calculates an \emph{approximation} to a parametric predictive
distribution. Predictive distributions from linear models require
\verb{x* (X'X)^\{-1\} x*}
along with the degrees of freedom. This function approximates both. It
should be reasonably accurate for models fit using \code{lm} when the new point
\verb{x*} isn't too far from the bulk of the data.
}
\examples{
library(dplyr)
jhu <- covid_case_death_rates \%>\%
  filter(time_value > "2021-11-01", geo_value \%in\% c("ak", "ca", "ny"))

r <- epi_recipe(jhu) \%>\%
  step_epi_lag(death_rate, lag = c(0, 7, 14)) \%>\%
  step_epi_ahead(death_rate, ahead = 7) \%>\%
  step_epi_naomit()

wf <- epi_workflow(r, linear_reg()) \%>\% fit(jhu)

f <- frosting() \%>\%
  layer_predict() \%>\%
  layer_predictive_distn() \%>\%
  layer_naomit(.pred)
wf1 <- wf \%>\% add_frosting(f)

p <- forecast(wf1)
p
}
