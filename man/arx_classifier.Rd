% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/arx_classifier.R
\name{arx_classifier}
\alias{arx_classifier}
\title{Direct autoregressive classifier with covariates}
\usage{
arx_classifier(
  epi_data,
  outcome,
  predictors,
  trainer = logistic_reg(),
  args_list = arx_class_args_list()
)
}
\arguments{
\item{epi_data}{An \code{epi_df} object}

\item{outcome}{A character (scalar) specifying the outcome (in the
\code{epi_df}). Note that as with \code{\link[=arx_forecaster]{arx_forecaster()}}, this is expected to
be real-valued. Conversion of this data to unordered classes is handled
internally based on the \code{breaks} argument to \code{\link[=arx_class_args_list]{arx_class_args_list()}}.
If discrete classes are already in the \code{epi_df}, it is recommended to
code up a classifier from scratch using \code{\link[=epi_recipe]{epi_recipe()}}.}

\item{predictors}{A character vector giving column(s) of predictor variables.
This defaults to the \code{outcome}. However, if manually specified, only those variables
specifically mentioned will be used. (The \code{outcome} will not be added.)
By default, equals the outcome. If manually specified, does not add the
outcome variable, so make sure to specify it.}

\item{trainer}{A \code{{parsnip}} model describing the type of estimation.
For now, we enforce \code{mode = "classification"}. Typical values are
\code{\link[parsnip:logistic_reg]{parsnip::logistic_reg()}} or \code{\link[parsnip:multinom_reg]{parsnip::multinom_reg()}}. More complicated
trainers like \code{\link[parsnip:naive_Bayes]{parsnip::naive_Bayes()}} or \code{\link[parsnip:rand_forest]{parsnip::rand_forest()}} can
also be used.}

\item{args_list}{A list of customization arguments to determine
the type of forecasting model. See \code{\link[=arx_class_args_list]{arx_class_args_list()}}.}
}
\value{
A list with (1) \code{predictions} an \code{epi_df} of predicted classes
and (2) \code{epi_workflow}, a list that encapsulates the entire estimation
workflow
}
\description{
This is an autoregressive classification model for
\link[epiprocess:epi_df]{epiprocess::epi_df} data. It does "direct" forecasting, meaning
that it estimates a class at a particular target horizon.
}
\examples{
library(dplyr)
jhu <- covid_case_death_rates \%>\%
  filter(time_value >= as.Date("2021-11-01"))

out <- arx_classifier(jhu, "death_rate", c("case_rate", "death_rate"))

out <- arx_classifier(
  jhu,
  "death_rate",
  c("case_rate", "death_rate"),
  trainer = parsnip::multinom_reg(),
  args_list = arx_class_args_list(
    breaks = c(-.05, .1), ahead = 14,
    horizon = 14, method = "linear_reg"
  )
)
}
\seealso{
\code{\link[=arx_class_epi_workflow]{arx_class_epi_workflow()}}, \code{\link[=arx_class_args_list]{arx_class_args_list()}}
}
