% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/arx_forecaster.R
\name{arx_fcast_epi_workflow}
\alias{arx_fcast_epi_workflow}
\title{Create a template \code{arx_forecaster} workflow}
\usage{
arx_fcast_epi_workflow(
  epi_data,
  outcome,
  predictors,
  trainer = NULL,
  args_list = arx_args_list(),
  .verbose = TRUE
)
}
\arguments{
\item{epi_data}{An \code{epi_df} object}

\item{outcome}{A character (scalar) specifying the outcome (in the
\code{epi_df}).}

\item{predictors}{A character vector giving column(s) of predictor
variables.}

\item{trainer}{A \code{{parsnip}} model describing the type of estimation.
For now, we enforce \code{mode = "regression"}. May be \code{NULL} (the default).}

\item{args_list}{A list of customization arguments to determine
the type of forecasting model. See \code{\link[=arx_args_list]{arx_args_list()}}.}

\item{.verbose}{If true, prints the arguments used in the workflow.}
}
\value{
An unfitted \code{epi_workflow}.
}
\description{
This function creates an unfit workflow for use with \code{\link[=arx_forecaster]{arx_forecaster()}}.
It is useful if you want to make small modifications to that forecaster
before fitting and predicting. Supplying a trainer to the function
may alter the returned \code{epi_workflow} object (e.g., if you intend to
use \code{\link[=quantile_reg]{quantile_reg()}}) but can be omitted.
}
\examples{
jhu <- case_death_rate_subset \%>\%
  dplyr::filter(time_value >= as.Date("2021-12-01"))

arx_fcast_epi_workflow(
  jhu, "death_rate",
  c("case_rate", "death_rate")
)

arx_fcast_epi_workflow(jhu, "death_rate",
  c("case_rate", "death_rate"),
  trainer = quantile_reg(),
  args_list = arx_args_list(quantile_levels = 1:9 / 10)
)
}
\seealso{
\code{\link[=arx_forecaster]{arx_forecaster()}}
}
