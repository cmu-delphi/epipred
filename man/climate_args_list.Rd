% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/climatological_forecaster.R
\name{climate_args_list}
\alias{climate_args_list}
\title{Climatological forecaster argument constructor}
\usage{
climate_args_list(
  ahead = 1:4,
  forecast_date = NULL,
  time_type = c("epiweek", "week", "month", "year", "day"),
  window_size = 3L,
  quantile_method = c("base8", "epipredict"),
  quantile_levels = c(0.1, 0.25, 0.5, 0.75, 0.9),
  symmetrize = FALSE,
  nonneg = TRUE,
  quantile_by_key = character(0L),
  ...
)
}
\arguments{
\item{ahead}{Vector of integers giving the number of time steps ahead
(in weeks) of the forecast date for which forecasts should be produced.}

\item{forecast_date}{Date. The date from which the forecast is occurring.
The default \code{NULL} will determine this automatically from either
\enumerate{
\item the maximum time value for which there's data if there is no latency
adjustment (the default case), or
\item the \code{as_of} date of \code{epi_data} if \code{adjust_latency} is
non-\code{NULL}.
}}

\item{time_type}{Character. The duration to which the forecasts correspond.}

\item{window_size}{Integer. The number of time points on each side of the
target to include in the calculation.}

\item{quantile_method}{One of either \code{"base8"} or \code{"epipredict"}. The first
case uses the quantiles of the observed history within the window, calculated
using \code{type = 8}. See \code{?stats::quantile} for additional information.
Alternatively, \code{"epipredict"} computes only the quartiles of the observed
data and interpolates (or extrapolates the remainder). Those quantiles
between .25 and .75 are interpolated with a cubic spline, while those
outside this range are extrapolated on the logistic-linear scale. This
produces a "parametric" quantile estimate with tails that are heavier than
a normal distribution. See the Examples for this comparison.}

\item{quantile_levels}{Vector or \code{NULL}. A vector of probabilities to produce
prediction intervals. These are created by computing the quantiles of
training residuals. A \code{NULL} value will result in point forecasts only.}

\item{symmetrize}{Logical. The default \code{TRUE} calculates
symmetric prediction intervals. This argument only applies when
residual quantiles are used. It is not applicable with
\code{trainer = quantile_reg()}, for example.}

\item{nonneg}{Logical. The default \code{TRUE} enforces nonnegative predictions
by hard-thresholding at 0.}

\item{quantile_by_key}{Character vector. Groups residuals by listed keys
before calculating residual quantiles. See the \code{by_key} argument to
\code{\link[=layer_residual_quantiles]{layer_residual_quantiles()}} for more information. The default,
\code{character(0)} performs no grouping. This argument only applies when
residual quantiles are used. It is not applicable with
\code{trainer = quantile_reg()}, for example.}

\item{...}{Space to handle future expansions (unused).}
}
\value{
A list containing updated parameter choices with class \code{climate_alist}.
}
\description{
Climatological forecaster argument constructor
}
\examples{

climate_args_list()
climate_args_list(
  ahead = 0:10,
  quantile_levels = c(.01, .025, 1:19 / 20, .975, .99)
)

# To visualize the quantiles produced with the `epipredict` method
tau <- c(.01, .025, 1:19 / 20, .975, .99)
sm_tau <- 5:15 / 20 # values between .25 and .75
distn <- dist_quantiles(qnorm(sm_tau), sm_tau)
epipredict_quantiles <- extrapolate_quantiles(distn, tau) \%>\%
  nested_quantiles \%>\%
  purrr::pluck(1, "values")

plot(
  qnorm(tau),
  epipredict_quantiles,
  pch = 16, col = 4, ylab = "epipredict", xlab = "Normal quantiles"
)
abline(0, 1, col = 2)
}
